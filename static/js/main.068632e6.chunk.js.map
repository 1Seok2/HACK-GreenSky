{"version":3,"sources":["assets/slimgslogo.jpg","components/navigation/NavBottom.tsx","components/map/marker/patient/PositionDistance.ts","components/alami/MakeSentence.tsx","components/navigation/MenuList.tsx","components/navigation/OtherMenu.tsx","components/alami/modal/ModalConents.tsx","components/alami/modal/alertModal.tsx","components/alami/Tips.tsx","components/alami/Data.tsx","components/map/api/SearchPlaces.ts","components/map/marker/MakeMarkerInfected.ts","components/map/marker/MakeMarkerMyPosition.ts","components/map/compose/MapNav.tsx","components/map/marker/AddMarker.ts","components/map/button/ButtonClose.ts","components/map/compose/SearchLists.tsx","components/map/button/ButtonReloadSetPosition.ts","components/map/Map.tsx","App.tsx","index.tsx"],"names":["module","exports","NavBottom","className","id","src","MyLogoImg","alt","PositionDistance","props","disLat","Math","abs","lat","_lat","disLng","lng","_lng","sqrt","pow","floor","MakeSentence","GoodSentences","SosoSentences","BadSentences","TerrSentences","RandomNum","random","length","state","chooseSentence","MenuList","href","onClick","window","open","source","name","OtherMenu","useState","aboutClicked","setAboutClicked","aria-label","role","type","e","preventDefault","wrapper","document","querySelector","classList","toggle","map","value","key","about","remove","add","ModalContent","content","AlertModal","thisModal","getElementsByClassName","idNum","contents","Tips","modal","Data","btnState","setBtnState","btnValue","setBtnValue","nowYear","nowMonth","nowDate","nowHour","nowMin","nowTime","setNowTime","useEffect","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getNowTime","getElementById","style","backgroundColor","alami","conditionBgColor","console","log","conditionFace","conditionTxt","conditionState","patientNum","data","SearchPlaces","index","places","el","createElement","itemStr","place_name","road_address_name","address_name","phone","innerHTML","MakeMarkerInfected","_patient","color","markerPosition","kakao","maps","LatLng","marker","Marker","position","setMap","iwContent","infowindow","InfoWindow","removable","event","addListener","Circle","center","radius","strokeWeight","strokeColor","strokeOpacity","strokeStyle","fillColor","fillOpacity","MakeMarkerMyPosition","imageSize","Size","markerImage","MarkerImage","image","MapNav","textAlign","fontSize","AddMarker","markers","idx","title","imgOptions","spriteSize","spriteOrigin","Point","offset","push","ButtonClose","menu_wrap","actived","SearchLists","searchValue","size","ButtonReloadSetPosition","latitude","longitude","coords","callback","container","options","level","_map","Map","geocoder","services","Geocoder","getCenter","result","status","Status","OK","infoDiv","i","region_type","coord2RegionCode","getLng","getLat","process","REACT_APP_API_KEY","Patient","accuracy","altitude","altitudeAccuracy","heading","speed","timestamp","now","error","setState","stateAlami","setStateAlami","countInCircle","setCountInCircle","setLatitude","setLongitude","search","setSearch","formState","setFormState","onEvent","onError","message","makeArrayPatient","a","PatientInfo","clusterer","MarkerClusterer","averageCenter","minLevel","daysGap","moment","diff","createDate","sliced","latlng","split","patient","address","parseFloat","month","day","AddCount","addMarkers","prevCount","btn_reload","loadedCoords","localStorage","getItem","navigator","geolocation","getCurrentPosition","load","DeleteMapElements","parsedCoords","JSON","parse","init","deleteMap","hasChildNodes","removeChild","firstChild","Container","onSubmit","ps","Places","zIndex","displayInfowindow","setContent","displayPlaces","listEl","menuEl","fragment","createDocumentFragment","bounds","LatLngBounds","lastChild","removeAllChildNods","removeMarker","placePosition","y","x","itemEl","extend","close","onmouseover","onmouseout","appendChild","scrollTop","setBounds","placesSearchCB","pagination","paginationEl","last","current","onclick","gotoPage","displayPagination","ZERO_RESULT","alert","ERROR","keyword","replace","keywordSearch","searchPlaces","form","placeholder","onChange","target","App","isLoading","setLoading","getData","axios","get","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.068632e6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/slimgslogo.6d11455c.jpg\";","import React from 'react';\nimport MyLogoImg from '../../assets/slimgslogo.jpg';\n\nconst NavBottom = () => {\n    return (\n        <>\n            <div className=\"nav-bottom\">\n                <img id=\"mylogo\" src={MyLogoImg} alt=\"logo\"/>\n            </div>\n        </>\n    ); \n}\n\nexport default NavBottom;","interface DistanceProps {\n    lat : number,\n    lng : number,\n    _lat : number,\n    _lng : number\n}\n\nconst PositionDistance = (props:DistanceProps) : number => {\n\n  let dis = 0;\n    let disLat : number = Math.abs(props.lat-props._lat);\n    let disLng = Math.abs(props.lng-props._lng);\n    dis = Math.sqrt(Math.pow((disLat%100 * 88804 + Math.floor((disLat-disLat%100)*100)*1480\n          + (disLat*100-Math.floor(disLat*100))*24.668),2)\n          + Math.pow((disLng%100 * 88804 + Math.floor((disLng-disLng%100)*100)*1480\n          + (disLng*100-Math.floor(disLng*100))*24.668),2));\n    return dis;\n}\n\nexport default PositionDistance;","import React from 'react';\n\ninterface SentenceProps {\n    state : string\n}\n\nconst MakeSentence = (props : SentenceProps) => {\n    const GoodSentences = [\n        \"이 주변은 청정지역 !\",\n        \"개인위생 철저히 지켜주시며 다니세요\",\n        \"밀린 장을 보러 가볼까요 ?\",\n        \"친목 때도 조심 ! 아시죠 ?\",\n        \"사회적 거리두기는 지켜주세요\",\n        \"미뤄뒀던 미용실을 가볼까요 ?\",\n        \"타지역의 사람을 믿지 마세요\",\n        \"그래도 실내는 언제나 조심 !\",\n        \"미뤄뒀던 일들을 처리하세요\"\n    ];\n    const SosoSentences = [\n        \"이정도면 간단한 외출 쯤이야 ..\",\n        \"마스크 잘 쓰고 다니세요 !\",\n        \"손 잘 씻고 다니세요 !\",\n        \"방심은 금물 !\",\n        \"마스크는 항상 해야합니다\",\n        \"돌아다니는 사람은 자신만이 아니라는 것\",\n        \"타지역의 사람을 조심해야 해요\",\n        \"나갈까 말까 ..?\",\n        \"사회적 거리두기는 필수 !\"\n    ];\n    const BadSentences = [\n        \"나가시지 않는 것을 추천드립니다\",\n        \"꼭 밖에 나가셔야 하나요 ?\",\n        \"이럴땐 집에 숨어야 해요\",\n        \"주변을 조심하세요 !\",\n        \"오히려 타지역에서 온 사람이 위험하겠네요\",\n        \"집에 아무도 초대하지 마세요\",\n        \"당분간은 집에 계시는게 좋을 것 같네요\",\n        \"힘든 출근길에도 조심 !\",\n        \"신나는 퇴근길에도 조심 !\"\n    ];\n    const TerrSentences = [\n        \"외출하지 않으시는게 좋습니다\",\n        \"꼭 밖에 나가셔야 하나요 ?\",\n        \"좀 심각한데요 ..?\",\n        \"집에서 할 재밌는 것을 찾으세요\",\n        \"오히려 타지역에서 온 사람이 위험하겠네요\",\n        \"힘든 출퇴근길이 되겠군요\",\n        \"외 출 금 지\",\n        \"아무도 집에 초대하지 마세요\",\n        \"나 혼자가 최고 !\"\n    ];\n\n\n    const chooseSentence = () => {\n        let RandomNum = Math.floor(Math.random() * GoodSentences.length);\n        if(props.state === 'good') return GoodSentences[RandomNum];\n        else if(props.state === 'soso') return SosoSentences[RandomNum];\n        else if(props.state === 'bad') return BadSentences[RandomNum];\n        else if(props.state === 'terr') return TerrSentences[RandomNum];\n        else return \"Error\";\n    }\n\n    return (\n        <> \n            <div id=\"conditionInfo\">\n                {chooseSentence()}\n            </div>\n        </>\n    );\n}\n\nexport default MakeSentence;","import React from 'react';\n\ninterface MenuListProps {\n    name : string,\n    source : string\n}\n\nconst MenuList = (props : MenuListProps) => {\n    return (\n        <li className=\"nav-list\">\n            <a href=\"#\" onClick={() => window.open(`${props.source}`)}>{props.name}\n            <span className=\"list-entity\">&gt;</span></a>\n        </li>\n    );\n}\n\nexport default MenuList;","import React, { useState } from 'react';\nimport MenuList from './MenuList';\n\n\nconst OtherMenu = () => {\n    const [clicked,setClicked] = useState('none');\n    const [aboutClicked,setAboutClicked] = useState('none');\n\n    const MenuValueList = [\n        {\n            name : 'COVID-19',\n            source : 'http://ncov.mohw.go.kr/'\n        },{\n            name : '질병관리부',\n            source : 'http://www.cdc.go.kr/'\n        },{\n            name : '보건복지부',\n            source : 'http://www.mohw.go.kr/react/index.jsp'\n        }\n    ];\n\n    const onClickAbout = () => {\n        const about = document.querySelector('.other-menu-about');\n        if(aboutClicked === 'none'){\n            setAboutClicked('show');\n            about?.classList.remove('none');\n            about?.classList.add('show');\n        } else {\n            setAboutClicked('none');\n            about?.classList.remove('show');\n            about?.classList.add('none');\n        }\n    }\n\n    const onClickHBG = (e : any) => {\n        e.preventDefault();\n        const wrapper = document.querySelector('.other-menu-wrapper');\n        wrapper?.classList.toggle(\"nav-visible\");\n    }\n\n    return (\n        <>\n            <header>\n                <button aria-label=\"Toggle menu\" className=\"nav-button button-lines button-lines-x close\" \n                        role=\"button\" type=\"button\" onClick={onClickHBG}\n                >\n                    <span className=\"lines\"></span>\n                </button>\n            </header>\n             <nav className=\"nav-wrapper\">\n                <ul className=\"nav\">\n                    {MenuValueList.map((value) => {\n                        return <MenuList key={value.name+value.source} \n                                        name={value.name} source={value.source} />\n                    })}\n                    <li className=\"nav-list\">\n                        <a href=\"#\" onClick={onClickAbout}>ABOUT \n                        <span className=\"list-entity\">&gt;</span></a>\n                    </li>\n                    <ul className=\"other-menu-about none\">\n                        <li><a href=\"https://apis.map.kakao.com/\">@KAKAO MAP</a></li>\n                        <li><a href=\"https://github.com/1Seok2/Hack-GreenSky\">@GITHUB</a></li>\n                        <li><a href=\"mailto:unos@khu.ac.kr\">CONTACT</a></li>\n                    </ul>\n                </ul>\n            </nav>\n        </>\n    );\n}\n\nexport default OtherMenu;","import React from 'react';\n\ninterface ModalContentsProps {\n    content : string\n}\n\nconst ModalContent = (props : ModalContentsProps) => {\n    return (\n        <p>{props.content}</p>\n    );    \n}\n\nexport default ModalContent;","import React, { Component } from 'react';\nimport ModalContent from './ModalConents';\nimport '../../../style/alert.modal.scss';\n\ninterface ModalProps {\n    idNum : number,\n    contents : string[]\n}\n\nconst AlertModal = (props : ModalProps) => {\n    const onClickClose = () => {\n        const thisModal = document.getElementsByClassName('modal-wrapper')[props.idNum];\n        thisModal.classList.remove('show');\n        thisModal.classList.add('none');\n    }\n    return (\n        <>\n            <div className=\"modal-wrapper show\" id=\"id01\">\n                <div className=\"modal\">\n                    <div className=\"modal-header\">\n                        공지사항 &amp; Tips\n                        <div className=\"modal-exit\">\n                            <a onClick={onClickClose}>\n                                <i className=\"icon-cancel\"></i>\n                            </a>\n                        </div>\n                    </div>\n                    <div className=\"modal-content\">\n                        {props.contents.map((value) => {\n                            return <ModalContent key={value} content={value}/>\n                        })}\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default AlertModal;","import React, { useState } from 'react';\n\nconst Tips = () => {\n    const onClickTips = () => {\n        const modal : any = document.getElementsByClassName('modal-wrapper')[0];\n        modal.classList.remove('none');\n        modal.classList.add('show');\n        // const modal2 : any = document.getElementsByClassName('modal-wrapper')[1];\n        // modal2.classList.remove('none');\n        // modal2.classList.add('show');\n    }\n\n    return (\n        <a href=\"#\" onClick={onClickTips} className=\"btn-tips\">\n            <i className=\"icon-lightbulb\"></i>\n        </a>\n    );\n}\n\nexport default Tips;","import React, { Component, useState, useEffect } from \"react\";\nimport MakeSentence from \"./MakeSentence\";\nimport OtherMenu from \"../navigation/OtherMenu\";\nimport AlertModal from \"./modal/alertModal\";\nimport Tips from \"./Tips\";\nimport \"../../style/data.scss\";\nimport \"../../style/fontello-6de7bc38/css/mapticon-embedded.scss\";\n\ninterface DataProps {\n  lat: number;\n  lng: number;\n  patientNum: number;\n  alami: any;\n}\n\nconst Data = (props: DataProps) => {\n  const [btnState, setBtnState] = useState(\"none\");\n  const [btnValue, setBtnValue] = useState(\"icon-emo-wink\");\n  const [nowTime, setNowTime] = useState({\n    nowYear: \"\",\n    nowMonth: \"\",\n    nowDate: \"\",\n    nowHour: \"\",\n    nowMin: \"\",\n  });\n\n  const onClickPos = () => {\n    //init();\n    const data: any = document.getElementById(\"dataContainer\");\n    if (btnState === \"show\") {\n      data.classList.remove(\"show\");\n      data.classList.add(\"none\");\n      setBtnState(\"none\");\n      setBtnValue(\"icon-emo-wink\");\n    } else {\n      data.classList.remove(\"none\");\n      data.classList.add(\"show\");\n      setBtnState(\"show\");\n      setBtnValue(\"icon-map-o\");\n    }\n  };\n\n  const getNowTime = () => {\n    let nowTime = new Date();\n    setNowTime({\n      nowYear: `${nowTime.getFullYear()}`,\n      nowMonth:\n        nowTime.getMonth() + 1 < 10\n          ? `0${nowTime.getMonth() + 1}`\n          : `${nowTime.getMonth() + 1}`,\n      nowDate:\n        nowTime.getDate() < 10\n          ? `0${nowTime.getDate()}`\n          : `${nowTime.getDate()}`,\n      nowHour:\n        nowTime.getHours() < 10\n          ? `0${nowTime.getHours()}`\n          : `${nowTime.getHours()}`,\n      nowMin:\n        nowTime.getMinutes() < 10\n          ? `0${nowTime.getMinutes()}`\n          : `${nowTime.getMinutes()}`,\n    });\n  };\n\n  useEffect(() => {\n    getNowTime();\n    const Container: any = document.getElementById(\"dataContainer\");\n    Container.style.backgroundColor = props.alami.conditionBgColor;\n    console.log(\"rerender\");\n  }, []);\n\n  return (\n    <>\n      <Tips />\n      <AlertModal\n        idNum={0}\n        contents={[\n          \"⚠️ 필독 ⚠️\",\n          // \"위치 기본 값은 수서역 입니다\",\n          \"우측 하단의 현위치 버튼으로 위치 재설정 가능합니다\",\n          \"확진자가 방문한 곳을 표시합니다\",\n          \"돋보기 버튼으로 다른지역을 검색하여 볼 수 있습니다\",\n          // \"현재 코로나맵 리뉴얼 작업중에 있어 당분간 확진자 업데이트가 최신화되지 않을 수 있습니다. 빠른 시일내에 돌아오도록 하겠습니다.\",\n        ]}\n      />\n      <div\n        className=\"dataContainer none\"\n        id=\"dataContainer\"\n        style={{ backgroundColor: `${props.alami.conditionBgColor}` }}\n      >\n        <div className=\"other-menu-wrapper\">\n          <OtherMenu />\n        </div>\n        <div className=\"alami-wrapper\">\n          <div className=\"header\">\n            {/* 현 주소와 시간 표시 */}\n            <h1 id=\"centerAddr\">위치확인이 필요합니다</h1>\n            <h2 id=\"now-time\">\n              {nowTime.nowYear}-{nowTime.nowMonth}-{nowTime.nowDate}{\" \"}\n              {nowTime.nowHour}:{nowTime.nowMin}\n            </h2>\n          </div>\n          <div className=\"contents\">\n            <div id=\"conditionFace\">\n              <i className={`${props.alami.conditionFace}`}></i>\n            </div>\n            <div className=\"data-list\">\n              <h3 id=\"conditionTxt\">{props.alami.conditionTxt}</h3>\n              <MakeSentence state={props.alami.conditionState} />\n              <p className=\"data-list-part\">\n                주변 코로나환자수 : {props.patientNum} 명\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n      <a href=\"#\" id=\"btn-back\" onClick={onClickPos}>\n        <i className={btnValue}></i>\n      </a>\n    </>\n  );\n};\nexport default Data;\n","const SearchPlaces = (index : any, places : any) => {\n\n    var el : any = document.createElement('li'),\n    itemStr = '<span class=\"markerbg marker_' + (index+1) + '\"></span>' +\n                '<div class=\"info\">' +\n                '   <h5>' + places.place_name + '</h5>';\n\n    if (places.road_address_name) {\n        itemStr += '    <span>' + places.road_address_name + '</span>' +\n                    '   <span class=\"jibun gray\">' +  places.address_name  + '</span>';\n    } else {\n        itemStr += '    <span class=\"make-address\">' +  places.address_name  + '</span>'; \n    }\n                \n      itemStr += '  <span class=\"tel\">'+ `<a href=\"tel:${places.phone}\">${places.phone}</a>` + '</span>' +\n                '</div>';           \n\n    el.innerHTML = itemStr;\n    el.className = 'item';\n\n    return el;\n}\n\nexport default SearchPlaces;","// 확진자들의 위치 마커로 만듦\n\nconst MakeMarkerInfected = (map : any,_patient : any, color:string) => {\n    var markerPosition  = new window.kakao.maps.LatLng(_patient.lat, _patient.lng); \n\n    // 마커를 생성합니다\n    var marker = new window.kakao.maps.Marker({\n        position: markerPosition\n    });\n\n    // 마커가 지도 위에 표시되도록 설정합니다\n    marker.setMap(map);\n\n    // 마커에 커서가 오버됐을 때 마커 위에 표시할 인포윈도우를 생성합니다\n    var iwContent = `<div style=\"padding:5px;\">${_patient.position}</div>`,      // 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다\n            iwRemoveable = true; // removeable 속성을 ture 로 설정하면 인포윈도우를 닫을 수 있는 x버튼이 표시됩니다;\n\n    // 인포윈도우를 생성합니다\n    var infowindow = new window.kakao.maps.InfoWindow({\n        content : iwContent,\n        removable : iwRemoveable\n    });\n\n    // 마커에 클릭이벤트를 등록합니다\n    window.kakao.maps.event.addListener(marker, 'click', function() {\n        // 마커 위에 인포윈도우를 표시합니다\n        infowindow.open(map, marker);  \n    });\n\n\n    const circle = new window.kakao.maps.Circle({\n      center: new window.kakao.maps.LatLng(_patient.lat, _patient.lng), // 원의 중심좌표 입니다\n      radius: 1200, // 미터 단위의 원의 반지름입니다\n      strokeWeight: 3, // 선의 두께입니다\n      strokeColor: `${color}`, // 선의 색깔입니다\n      strokeOpacity: .6, // 선의 불투명도 입니다 1에서 0 사이의 값이며 0에 가까울수록 투명합니다\n      strokeStyle: 'solid', // 선의 스타일 입니다\n      fillColor: `${color}`, // 채우기 색깔입니다\n      fillOpacity: 0.25, // 채우기 불투명도 입니다\n    });\n    \n    // 지도에 원을 표시합니다\n    circle.setMap(map);\n\n    return marker;\n};\n\nexport default MakeMarkerInfected;","const MakeMarkerMyPosition = (map:any,_lat : any,_lng : any) => {\n  var imageSrc = \"https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png\"; \n  // 마커 이미지의 이미지 크기 입니다\n  var imageSize = new window.kakao.maps.Size(24, 35); \n    \n  // 마커 이미지를 생성합니다    \n  var markerImage = new window.kakao.maps.MarkerImage(imageSrc, imageSize); \n  \n  var markerPosition = new window.kakao.maps.LatLng(\n      _lat,\n      _lng\n    );\n\n    // 마커를 생성합니다\n    var marker = new window.kakao.maps.Marker({\n      position: markerPosition,\n      image : markerImage\n    });\n\n    // 마커가 지도 위에 표시되도록 설정합니다\n    marker.setMap(map);\n    // 지도에 표시할 원을 생성합니다\n    var circle = new window.kakao.maps.Circle({\n      center: new window.kakao.maps.LatLng(\n        _lat,\n        _lng\n      ), // 원의 중심좌표 입니다\n      radius: 2400, // 미터 단위의 원의 반지름입니다 , 대생활반경 4600 , 중생활반경 2400\n      strokeWeight: 1, // 선의 두께입니다\n      strokeColor: '#75B8FA', // 선의 색깔입니다\n      strokeOpacity: 1, // 선의 불투명도 입니다 1에서 0 사이의 값이며 0에 가까울수록 투명합니다\n      strokeStyle: 'solid', // 선의 스타일 입니다\n      fillColor: '#CFE7FF', // 채우기 색깔입니다\n      fillOpacity: 0.6, // 채우기 불투명도 입니다\n    });\n\n    // 지도에 원을 표시합니다\n    circle.setMap(map);\n};\n\nexport default MakeMarkerMyPosition;","import React from \"react\";\nimport \"../../../style/fontello-6de7bc38/css/mapticon-embedded.scss\";\n\nconst MapNav = () => {\n  return (\n    <>\n      <ul className=\"mapNav\">\n        {/* <li className=\"mapNav-list-title\">확진자 발생 추이</li> */}\n        <li className=\"navGrn\">\n          <i className=\"icon-circle icon-circle-green\"></i> 8~14 일 사이\n        </li>\n        <li className=\"navOrg\">\n          <i className=\"icon-circle icon-circle-orange\"></i> 4~7 일 사이\n        </li>\n        <li className=\"navRed\">\n          <i className=\"icon-circle icon-circle-red\"></i> 3일 이내\n        </li>\n        <li style={{ textAlign: \"right\", fontSize: \".7rem\" }}>\n          <span style={{ fontSize: \".44rem\" }}>데이터 출처 : 코로나맵(coronamap.site)</span>\n        </li>\n      </ul>\n    </>\n  );\n};\n\nexport default MapNav;\n","// 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\nconst AddMarker = (map : any, markers : any ,position : any, idx : any, title? : any) => {\n    var imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다\n        imageSize = new window.kakao.maps.Size(36, 37),  // 마커 이미지의 크기\n        imgOptions =  {\n            spriteSize : new window.kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기\n            spriteOrigin : new window.kakao.maps.Point(0, (idx*46)+10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\n            offset: new window.kakao.maps.Point(13, 37) // 마커 좌표에 일치시킬 이미지 내에서의 좌표\n        },\n        markerImage = new window.kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),\n            marker = new window.kakao.maps.Marker({\n            position: position, // 마커의 위치\n            image: markerImage \n        });\n\n    marker.setMap(map); // 지도 위에 마커를 표출합니다\n    markers.push(marker);  // 배열에 생성된 마커를 추가합니다\n\n    return marker;\n}\n\nexport default AddMarker;","const ButtonClose = () => {\n    // 검색된 리스트 X 버튼 누를 시 리스트 제거 및 검색 버튼 active 제거\n    const menu_wrap = document.querySelector('#menu_wrap');\n    const actived = document.querySelector('#btn-search');\n    menu_wrap?.classList.toggle('none');\n    menu_wrap?.classList.toggle('show');\n    actived?.classList.remove('active');\n}\n\nexport default ButtonClose;","import React from 'react';\nimport ButtonClose from '../button/ButtonClose';\n\ninterface SearchProps {\n    searchValue : string\n}\n\nconst SearchLists = (props : SearchProps) => {\n    return (\n        <>\n            <div id=\"menu_wrap\" className=\"bg_white none\">\n                <div className=\"option\">\n                <div onClick={ButtonClose} className=\"btn-search-close\"><i className=\"icon-cancel\"></i>\n                    <form className=\"kakao-search-form\">\n                        키워드 : <input type=\"text\" value={props.searchValue} id=\"keyword\" size={15} /> \n                        <button type=\"submit\">검색하기</button> \n                    </form>\n                </div>\n                </div>\n                <ul id=\"placesList\"></ul>\n                <div id=\"pagination\"></div>\n            </div>\n        </>\n    );\n}\n\nexport default SearchLists;","const ButtonReloadSetPosition = (latitude : number, longitude : number) => {\n    let container = document.getElementById('map');\n    let options = {\n        center: new window.kakao.maps.LatLng(\n        latitude,\n        longitude\n        ),\n        level: 8,\n    };\n    let _map = new window.kakao.maps.Map(container, options);\n    let geocoder = new window.kakao.maps.services.Geocoder();\n\n    const searchAddrFromCoords = (coords : any, callback : any) : void=> {\n        // 좌표로 행정동 주소 정보를 요청합니다\n        geocoder.coord2RegionCode(coords.getLng(), coords.getLat(), callback);         \n    }\n    const displayCenterInfo = (result : any, status : any) => {\n        if (status === window.kakao.maps.services.Status.OK) {\n        var infoDiv : any = document.getElementById('centerAddr');\n        for(var i = 0; i < result.length; i++) {\n            // 행정동의 region_type 값은 'H' 이므로\n            if (result[i].region_type === 'H') {\n            infoDiv.innerHTML = result[i].address_name;\n            break;\n            }\n        }\n        }    \n    }\n    // 현재 지도 중심좌표로 주소를 검색해서 상단에 표시합니다\n    searchAddrFromCoords(_map.getCenter(), displayCenterInfo);\n\n    return _map;\n}\n\nexport default ButtonReloadSetPosition;","// global kakao\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport NavBottom from \"../navigation/NavBottom\";\nimport PositionDistance from \"./marker/patient/PositionDistance\";\n// import Patient from '../../InfectedData.json';\nimport Data from \"../alami/Data\";\nimport \"../../style/search.kakao.scss\";\nimport \"../../style/fontello-6de7bc38/css/mapticon-embedded.scss\";\nimport SearchPlaces from \"./api/SearchPlaces\";\nimport MakeMarkerInfected from \"./marker/MakeMarkerInfected\";\nimport MakeMarkerMyPosition from \"./marker/MakeMarkerMyPosition\";\nimport MapNav from \"./compose/MapNav\";\nimport AddMarker from \"./marker/AddMarker\";\nimport SearchLists from \"./compose/SearchLists\";\nimport ButtonReloadSetPosition from \"./button/ButtonReloadSetPosition\";\nimport moment from \"moment\";\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\ndeclare global {\n  interface Window {\n    kakao: any;\n  }\n}\n\nconst colorRed = \"#eb4d4b\";\nconst colorOrg = \"#f39c12\";\nconst colorGrn = \"#27ae60\";\n\n//hooks\nconst Map = ({Patient} : any) => {\n  const [state, setState] = useState({\n    accuracy: null,\n    altitude: null,\n    altitudeAccuracy: null,\n    heading: null,\n    speed: null,\n    timestamp: Date.now(),\n    error: false,\n  });\n  const [stateAlami, setStateAlami] = useState({\n    conditionFace: \"\",\n    conditionState: \"\",\n    conditionTxt: \"위치 조정 해주세요\",\n    conditionBgColor: \"#009432\",\n  });\n  const [countInCircle, setCountInCircle] = useState(0);\n  const [latitude, setLatitude] = useState(37.4882);\n  const [longitude, setLongitude] = useState(127.1026);\n  const [search, setSearch] = useState(\"\");\n  const [formState, setFormState] = useState(\"none\");\n  const mounted = true;\n\n  const onEvent = (event: any) => {\n    if (mounted) {\n      setState({\n        ...state,\n        accuracy: event.coords.accuracy,\n        altitude: event.coords.altitude,\n        altitudeAccuracy: event.coords.altitudeAccuracy,\n        heading: event.coords.heading,\n        speed: event.coords.speed,\n        timestamp: event.timestamp,\n      });\n      setLatitude(event.coords.latitude);\n      setLongitude(event.coords.longitude);\n    }\n  }\n  const onError = (error: any) => {\n      setState({ ...state, error: error.message });\n      console.log(\"error: \", error);\n    }\n  let map: any;\n\n  const makeArrayPatient = async () => {\n    let PatientInfo: Object[] = [];\n    var clusterer = new window.kakao.maps.MarkerClusterer({\n      map: map, // 마커들을 클러스터로 관리하고 표시할 지도 객체\n      averageCenter: true, // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정\n      minLevel: 7, // 클러스터 할 최소 지도 레벨\n    });\n\n    var markers: any = [];\n\n    if (Patient) {\n        Patient.data.map((value: any) => {\n          let daysGap: number;\n          // daysGap = isInFewDays(value.month, value.day);\n          // const curDay = {\n          //   _month : value.month,\n          //   _date : value.day\n          // }\n          // daysGap = DateGapAcumulator(curDay);\n          daysGap = moment(Date.now()).diff(moment(value.createDate), \"days\");\n          if (daysGap <= 14) {\n            // console.log(daysGap);\n            let sliced = value.latlng.split(\", \");\n            let patient = {\n              position: value.address,\n              lat: parseFloat(sliced[0]),\n              lng: parseFloat(sliced[1]),\n              month: value.month,\n              day: value.day,\n            };\n            PatientInfo = [...PatientInfo, patient];\n\n            if (daysGap <= 3) {\n              markers = [\n                ...markers,\n                MakeMarkerInfected(map, patient, colorRed),\n              ];\n            } else if (3 < daysGap && daysGap <= 7) {\n              markers = [\n                ...markers,\n                MakeMarkerInfected(map, patient, colorOrg),\n              ];\n            } else if (7 < daysGap && daysGap <= 14) {\n              markers = [\n                ...markers,\n                MakeMarkerInfected(map, patient, colorGrn),\n              ];\n            }\n\n            let distance: number;\n            const getDistance = {\n              lat: latitude,\n              lng: longitude,\n              _lat: patient.lat,\n              _lng: patient.lng,\n            };\n            distance = PositionDistance(getDistance);\n            if (distance < 3600) {\n              AddCount();\n            }\n          }\n        });\n    }\n\n    clusterer.addMarkers(markers);\n  };\n\n  const AddCount = () => {\n    setCountInCircle((prevCount) => prevCount + 1);\n  };\n\n  const btn_reload = () => {\n    setCountInCircle(0);\n    const loadedCoords = localStorage.getItem(\"coords\");\n    if (loadedCoords === null) {\n      navigator.geolocation.getCurrentPosition(onEvent, onError);\n      window.kakao.maps.load(() => {\n        DeleteMapElements();\n        map = ButtonReloadSetPosition(latitude, longitude);\n      });\n      MakeMarkerMyPosition(map, latitude, longitude);\n      makeArrayPatient();\n    } else {\n      const parsedCoords = JSON.parse(loadedCoords);\n      setLatitude(parsedCoords.lat);\n      setLongitude(parsedCoords.lng);\n      setCountInCircle(0);\n      window.kakao.maps.load(() => {\n        DeleteMapElements();\n        map = ButtonReloadSetPosition(latitude, longitude);\n      });\n      MakeMarkerMyPosition(map, latitude, longitude);\n\n      makeArrayPatient();\n    }\n    init();\n  }\n\n  const btn_search = () => {\n    const form: any = document.querySelector(\".form-search\");\n    const menu_wrap = document.querySelector(\"#menu_wrap\");\n    const actived = document.querySelector(\"#btn-search\");\n    if (formState === \"none\") {\n      form.classList.remove(\"none\");\n      form.classList.add(\"show\");\n      setFormState(\"show\");\n      menu_wrap?.classList.remove(\"show\");\n      menu_wrap?.classList.add(\"none\");\n      actived?.classList.add(\"active\");\n    } else {\n      form.classList.remove(\"show\");\n      form.classList.add(\"none\");\n      setFormState(\"none\");\n      menu_wrap?.classList.remove(\"show\");\n      menu_wrap?.classList.add(\"none\");\n      actived?.classList.remove(\"active\");\n    }\n  };\n\n  const onChangeSearch = (e: any) => {\n    setSearch(e.target.value);\n  };\n\n  const onSubmitForm = (e: any) => {\n    const menu_wrap = document.querySelector(\"#menu_wrap\");\n    menu_wrap?.classList.toggle(\"none\");\n    menu_wrap?.classList.toggle(\"show\");\n    e.preventDefault();\n    DeleteMapElements();\n    window.kakao.maps.load(() => {\n      DeleteMapElements();\n      let container = document.getElementById(\"map\");\n      let options = {\n        center: new window.kakao.maps.LatLng(latitude, longitude),\n        level: 8,\n      };\n      map = new window.kakao.maps.Map(container, options);\n\n      // 마커를 담을 배열입니다\n      var markers: any = [];\n\n      // 장소 검색 객체를 생성합니다\n      var ps = new window.kakao.maps.services.Places();\n\n      // 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다\n      var infowindow = new window.kakao.maps.InfoWindow({ zIndex: 1 });\n\n      // 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다\n      // 인포윈도우에 장소명을 표시합니다\n      const displayInfowindow = (marker: any, title: any) => {\n        var content = '<div style=\"padding:5px;z-index:1;\">' + title + \"</div>\";\n\n        infowindow.setContent(content);\n        infowindow.open(map, marker);\n      };\n\n      // 검색결과 목록의 자식 Element를 제거하는 함수입니다\n      const removeAllChildNods = (el: any) => {\n        while (el.hasChildNodes()) {\n          el.removeChild(el.lastChild);\n        }\n      };\n\n      // 검색결과 목록 하단에 페이지번호를 표시는 함수입니다\n      const displayPagination = (pagination: any) => {\n        var paginationEl: any = document.getElementById(\"pagination\"),\n          fragment: any = document.createDocumentFragment(),\n          i;\n\n        // 기존에 추가된 페이지번호를 삭제합니다\n        while (paginationEl.hasChildNodes()) {\n          paginationEl.removeChild(paginationEl.lastChild);\n        }\n\n        for (i = 1; i <= pagination.last; i++) {\n          var el = document.createElement(\"a\");\n          el.href = \"#\";\n          el.innerHTML = `${i}`;\n\n          if (i === pagination.current) {\n            el.className = \"on\";\n          } else {\n            el.onclick = (function (i) {\n              return function () {\n                pagination.gotoPage(i);\n              };\n            })(i);\n          }\n\n          fragment.appendChild(el);\n        }\n        paginationEl.appendChild(fragment);\n      };\n\n      // 지도 위에 표시되고 있는 마커를 모두 제거합니다\n      const removeMarker = () => {\n        for (var i = 0; i < markers.length; i++) {\n          markers[i].setMap(null);\n        }\n        markers = [];\n      };\n\n      // 검색 결과 목록과 마커를 표출하는 함수입니다\n      const displayPlaces = (places: any) => {\n        var listEl = document.getElementById(\"placesList\"),\n          menuEl: any = document.getElementById(\"menu_wrap\"),\n          fragment = document.createDocumentFragment(),\n          bounds = new window.kakao.maps.LatLngBounds(),\n          listStr = \"\";\n\n        // 검색 결과 목록에 추가된 항목들을 제거합니다\n        removeAllChildNods(listEl);\n\n        // 지도에 표시되고 있는 마커를 제거합니다\n        removeMarker();\n\n        for (var i = 0; i < places.length; i++) {\n          // 마커를 생성하고 지도에 표시합니다\n          var placePosition = new window.kakao.maps.LatLng(\n              places[i].y,\n              places[i].x\n            ),\n            marker: any = AddMarker(map, markers, placePosition, i),\n            itemEl: any = SearchPlaces(i, places[i]); // 검색 결과 항목 Element를 생성합니다\n\n          // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\n          // LatLngBounds 객체에 좌표를 추가합니다\n          bounds.extend(placePosition);\n\n          // 마커와 검색결과 항목에 mouseover 했을때\n          // 해당 장소에 인포윈도우에 장소명을 표시합니다\n          // mouseout 했을 때는 인포윈도우를 닫습니다\n          (function (marker, title) {\n            window.kakao.maps.event.addListener(\n              marker,\n              \"mouseover\",\n              function () {\n                displayInfowindow(marker, title);\n              }\n            );\n\n            window.kakao.maps.event.addListener(\n              marker,\n              \"mouseout\",\n              function () {\n                infowindow.close();\n              }\n            );\n\n            itemEl.onmouseover = function () {\n              displayInfowindow(marker, title);\n            };\n\n            itemEl.onmouseout = function () {\n              infowindow.close();\n            };\n          })(marker, places[i].place_name);\n\n          fragment.appendChild(itemEl);\n        }\n\n        // 검색결과 항목들을 검색결과 목록 Elemnet에 추가합니다\n        listEl?.appendChild(fragment);\n        menuEl.scrollTop = 0;\n\n        // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\n        map.setBounds(bounds);\n      };\n\n      // 장소검색이 완료됐을 때 호출되는 콜백함수 입니다\n      const placesSearchCB = (data: any, status: any, pagination: any) => {\n        if (status === window.kakao.maps.services.Status.OK) {\n          // 정상적으로 검색이 완료됐으면\n          // 검색 목록과 마커를 표출합니다\n          displayPlaces(data);\n\n          // 페이지 번호를 표출합니다\n          displayPagination(pagination);\n        } else if (status === window.kakao.maps.services.Status.ZERO_RESULT) {\n          alert(\"검색 결과가 존재하지 않습니다.\");\n          return;\n        } else if (status === window.kakao.maps.services.Status.ERROR) {\n          alert(\"검색 결과 중 오류가 발생했습니다.\");\n          return;\n        }\n      };\n\n      // 키워드 검색을 요청하는 함수입니다\n      const searchPlaces = () => {\n        var key: any = document.getElementById(\"keyword\");\n        let keyword: any = key.value;\n\n        if (!keyword.replace(/^\\s+|\\s+$/g, \"\")) {\n          alert(\"키워드를 입력해주세요!\");\n          return false;\n        }\n\n        // 장소검색 객체를 통해 키워드로 장소검색을 요청합니다\n        ps.keywordSearch(keyword, placesSearchCB);\n      };\n\n      // 키워드로 장소를 검색합니다\n      searchPlaces();\n    });\n    setCountInCircle(0);\n    makeArrayPatient();\n    const form: any = document.querySelector(\".form-search\");\n    form.classList.remove(\"show\");\n    form.classList.add(\"none\");\n    setFormState(\"none\");\n  };\n\n  const DeleteMapElements = () => {\n    let deleteMap: any = document.getElementById(\"map\");\n    while (deleteMap.hasChildNodes()) {\n      deleteMap.removeChild(deleteMap.firstChild);\n    }\n  };\n\n  const init = () => {\n    const Container: any = document.getElementById(\"dataContainer\");\n    if (countInCircle < 1) {\n      setStateAlami({\n        conditionState: \"good\",\n        conditionTxt: \"좋음\",\n        conditionFace: \"icon-smile\",\n        conditionBgColor: \"#1289A7\",\n      });\n      Container.style.backgroundColor = stateAlami.conditionBgColor;\n    } else if (1 <= countInCircle && countInCircle <= 2) {\n      setStateAlami({\n        conditionState: \"soso\",\n        conditionTxt: \"조금 위험\",\n        conditionFace: \"icon-meh\",\n        conditionBgColor: \"#009432\",\n      });\n      Container.style.backgroundColor = stateAlami.conditionBgColor;\n    } else if (3 <= countInCircle && countInCircle <= 5) {\n      setStateAlami({\n        conditionState: \"bad\",\n        conditionTxt: \"위험\",\n        conditionFace: \"icon-frown\",\n        conditionBgColor: \"#cc8e35\",\n      });\n      Container.style.backgroundColor = stateAlami.conditionBgColor;\n    } else if (6 <= countInCircle) {\n      setStateAlami({\n        conditionState: \"terr\",\n        conditionTxt: \"매우 위험\",\n        conditionFace: \"icon-emo-devil\",\n        conditionBgColor: \"#b33939\",\n      });\n      Container.style.backgroundColor = stateAlami.conditionBgColor;\n    }\n  }\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(onEvent, onError);\n    init();\n    btn_reload();\n    return () => {\n      DeleteMapElements();\n    };\n  }, []);\n\n  console.log('render!')\n  return (\n    <>\n      <div id=\"map\"></div>\n      <SearchLists searchValue={search} />\n      <div className=\"options\">\n        <Data\n          lat={latitude}\n          lng={longitude}\n          patientNum={countInCircle}\n          alami={stateAlami}\n        />\n        <MapNav />\n        <form className=\"form-search none\" onSubmit={onSubmitForm}>\n          <input\n            type=\"text\"\n            placeholder=\"주소를 입력해 주세요\"\n            value={search}\n            onChange={onChangeSearch}\n          />\n          <span className=\"btn-form-close\" onClick={() => setSearch(\"\")}>\n            <i className=\"icon-cancel\"></i>\n          </span>\n        </form>\n        <a href=\"#\" className=\"btn\" id=\"btn-search\" onClick={btn_search}>\n          <i className=\"icon-search\"></i>\n        </a>\n        <a href=\"#\" className=\"btn\" id=\"btn-reload\" onClick={btn_reload}>\n          <i className=\"icon-location\"></i>\n        </a>\n      </div>\n      <NavBottom />\n    </>\n  );\n};\nexport default Map;\n","import React, {useEffect, useState} from 'react';\nimport Map from './components/map/Map';\nimport './style/page.loader.scss'\nimport axios from \"axios\";\nconst App = () => {\n  const [state, setState] = useState(null);\n  const [isLoading, setLoading] = useState(true);\n\n  const getData = async () => {\n      let result = null;\n\n      try {\n          result = (await axios.get(\"https://coroname.me/getdata\")).data\n      } catch (e) {\n          console.error(e);\n      } finally {\n          result && setState(result);\n          setLoading(false);\n      }\n  }\n\n  useEffect( () => {\n      getData();\n  },[]);\n\n  return (\n      isLoading ?\n          <div className=\"map-loader-container\">\n              <div className=\"map-loader\"></div>\n          </div>\n          : <Map Patient={state} />\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}